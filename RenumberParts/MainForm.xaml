<Window x:Class="RenumberParts.MainForm"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
        xmlns:sw="clr-namespace:WpfStyleableWindow.StyleableWindow"      
             xmlns:local="clr-namespace:RenumberParts"
        mc:Ignorable="d" Height="351.558" Width="230.672" MinHeight="300" MinWidth="250"  MaxHeight="400" MaxWidth="200" WindowStartupLocation="CenterScreen"
        Background="White" 
        Foreground="Black" 
        ResizeMode="NoResize" 
        Title="Renumber Parts" 
        Style="{DynamicResource CustomWindowStyle}"  >

    <Window.InputBindings>
        <KeyBinding Key="A" Modifiers="Control" Command="SelectAll" />
    </Window.InputBindings>

    <Window.CommandBindings>
        <CommandBinding Command="SelectAll" Executed="AddButton_Click" />

    </Window.CommandBindings>

    <Grid Margin="0,0,-6,41">
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="0*"/>
            <ColumnDefinition Width="18*"/>
            <ColumnDefinition Width="7*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Border BorderBrush="Black" BorderThickness="1" Margin="19,0,16,-28" Grid.Column="1" Height="60" VerticalAlignment="Bottom" Grid.ColumnSpan="2"/>

        <Border BorderBrush="Black" BorderThickness="1" Margin="19,0,19,61" Grid.Column="1" Height="60" VerticalAlignment="Bottom" Grid.ColumnSpan="2">

        </Border>

        <Button x:Name="ResetColor" Content="Reset color" Margin="31,0,69,77" Click="Button_Click" Grid.Column="1" Height="28" VerticalAlignment="Bottom" FontSize="11"/>
        <Button x:Name="AddButton" Content="Add" Margin="19,0,19,148" Click="AddButton_Click" Grid.Column="1" Height="38" VerticalAlignment="Bottom" Grid.ColumnSpan="2"  />
        <TextBox x:Name="PrefixBox" Height="20" Margin="79,0,19,237" TextWrapping="Wrap" Text="Prefix" VerticalAlignment="Bottom" Grid.Column="1" Grid.ColumnSpan="2"/>
        <Label Content="Prefix" Height="24" Margin="16,0,114,237" VerticalAlignment="Bottom" Grid.Column="1"/>
        <TextBox x:Name="NumberBox"  TextChanged="textChangedEventHandler" Height="20" Margin="79,0,19,208" TextWrapping="Wrap" Text="000" VerticalAlignment="Bottom" Grid.Column="1" Grid.ColumnSpan="2"/>
        <Label Content="Number" Height="24" Margin="16,0,103,208" VerticalAlignment="Bottom" Grid.Column="1"/>
        <Button  Click="DiplaceUp_Click" x:Name="DiplaceUp" Content="Displace values &#xD;&#xA;         up" Margin="31,0,69,-16" RenderTransformOrigin="0.44,0.595" FontSize="10" Grid.Column="1" Height="30" VerticalAlignment="Bottom"/>
        <Button Click="DiplaceDn_Click"  x:Name="DisplaceDN" Content="Displace values&#xD;&#xA;       down" Margin="133,0,29,-16" FontSize="10" IsCancel="True" IsDefault="True" Grid.Column="1" RenderTransformOrigin="0.477,0.461" Height="30" VerticalAlignment="Bottom" Grid.ColumnSpan="2"/>
        <Label Content="Displace existing values" HorizontalAlignment="Left" Height="24" Margin="16,0,0,30" VerticalAlignment="Bottom" Width="135" Grid.Column="1"/>
        <Label Content="Reset color and values" HorizontalAlignment="Left" Height="24" Margin="19,0,0,117" VerticalAlignment="Bottom" Width="132" Grid.Column="1"/>
        <Button Grid.ColumnSpan="3" Content="Reset Values" Margin="133,0,29,77" VerticalAlignment="Bottom" Height="28" Click="Button_Click_1" FontSize="11"/>

    </Grid>



    <Window.Resources>

        <!--the brushes used in the template (use these to customize the window look along with the window style (see the bottom of this file)-->
        <!-- Valentin here you can play with the colors of the bar-->
        <SolidColorBrush x:Key="WindowColor" Color="Red"/>
        <SolidColorBrush x:Key="WindowBackColor" Color="Gray"/>
        <SolidColorBrush x:Key="WindowForeColor" Color="WhiteSmoke"/>
        <SolidColorBrush x:Key="WindowForeHighlightColor" Color="WhiteSmoke"/>
        <SolidColorBrush x:Key="WindowButtonColor" Color="LightGray"/>
        <SolidColorBrush x:Key="WindowButtonOverColor" Color="LightBlue"/>
        <SolidColorBrush x:Key="WindowButtonPressedColor" Color="DarkGray"/>

        <!--The window template and it's components -->

        <sw:WindowMinimizeCommand x:Key="MinimizeCommand"></sw:WindowMinimizeCommand>
        <sw:WindowMaximizeCommand x:Key="MaximizeCommand"></sw:WindowMaximizeCommand>
        <sw:WindowCloseCommand x:Key="CloseCommand"></sw:WindowCloseCommand>

        <Style TargetType="{x:Type Button}" x:Key="WindowButton">
            <Setter Property="Height" Value="25"/>
            <Setter Property="Width" Value="25"/>
            <Setter Property="Background" Value="{StaticResource WindowButtonColor}"/>
            <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="False">
                                <Setter Property="Background" Value="{StaticResource WindowButtonColor}"/>
                                <Setter Property="Foreground" Value="{StaticResource WindowColor}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background" Value="{StaticResource WindowButtonOverColor}"/>
                                <Setter Property="Foreground" Value="{StaticResource WindowForeHighlightColor}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="{StaticResource WindowButtonPressedColor}"/>
                                <Setter Property="Foreground" Value="{StaticResource WindowForeColor}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type Image}" x:Key="WindowIcon">
            <Setter Property="Height" Value="25"/>
            <Setter Property="Width" Value="25"/>
        </Style>

        <ControlTemplate x:Key="WindowTemplate" TargetType="{x:Type Window}">
            <Grid Background="{StaticResource WindowBackColor}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="30"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Grid Grid.Row="0" Margin="5,0,5,0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="75"/>
                        </Grid.ColumnDefinitions>
                        <Label Grid.Column="0"                                           
                                    sw:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource CloseCommand}"                                               
                                    sw:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}" Padding="0">
                            <Image DockPanel.Dock="Left" Style="{StaticResource WindowIcon}" Source="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}},Path=Icon}"                                         
                                    Width="16"                                           
                                    sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"                                           
                                    sw:ShowSystemMenuBehavior.LeftButtonShowAt="{Binding ElementName=WindowContent}"/>
                        </Label>
                        <Label Grid.Column="1" DockPanel.Dock="Left" Content="{TemplateBinding Property=Title}" Padding="3,0,0,0"                                                                                  
                                    HorizontalContentAlignment="Center"
                                    VerticalContentAlignment="Center"
                                    HorizontalAlignment="Stretch"
                                    VerticalAlignment="Stretch"
                                    Foreground="{StaticResource WindowForeColor}"                                           
                                    FontSize="16"
                                    sw:WindowDragBehavior.LeftMouseButtonDrag="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                    sw:ControlDoubleClickBehavior.ExecuteCommand="{StaticResource MaximizeCommand}"
                                    sw:ControlDoubleClickBehavior.ExecuteCommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                    sw:ShowSystemMenuBehavior.TargetWindow="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"
                                    sw:ShowSystemMenuBehavior.RightButtonShow="true">
                        </Label>
                        <StackPanel Grid.Column="2" Orientation="Horizontal">
                            <Button DockPanel.Dock="Right" Style="{StaticResource WindowButton}" Command="{StaticResource MinimizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">_</Button>
                            <Button DockPanel.Dock="Right" Style="{StaticResource WindowButton}">+</Button> <!-- To allow maximize copy this command inside declaration Command="{StaticResource MaximizeCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"-->
                            <Button DockPanel.Dock="Right"  Style="{StaticResource WindowButton}" Command="{StaticResource CloseCommand}" CommandParameter="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">X</Button>
                        </StackPanel>
                    </Grid>
                    <Border Grid.Row="1" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <Grid>
                            <AdornerDecorator>
                                <ContentPresenter x:Name="WindowContent"/>
                            </AdornerDecorator>
                            <ResizeGrip  x:Name="WindowResizeGrip" HorizontalAlignment="Right" IsTabStop="false" Visibility="Collapsed" VerticalAlignment="Bottom"/>
                        </Grid>
                    </Border>
                </Grid>
                <Thumb x:Name="ThumbTop" Height="6" Margin="14,0" VerticalAlignment="Top" Cursor="SizeNS"  Opacity="0" sw:WindowResizeBehavior.TopResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbTopLeft" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Left" Cursor="SizeNWSE"  Opacity="0" sw:WindowResizeBehavior.TopLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbBottom" Height="6" Margin="14,0" VerticalAlignment="Bottom" Cursor="SizeNS" Opacity="0" sw:WindowResizeBehavior.BottomResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbTopRight" Height="6" Width="6" VerticalAlignment="Top" HorizontalAlignment="Right" Cursor="SizeNESW"  Opacity="0" sw:WindowResizeBehavior.TopRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbRight" HorizontalAlignment="Right" Margin="0,14" Width="6" Cursor="SizeWE"  Opacity="0" sw:WindowResizeBehavior.RightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbBottomRight" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Right" Cursor="SizeNWSE"  Opacity="0" sw:WindowResizeBehavior.BottomRightResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbLeft" HorizontalAlignment="Left" Margin="0,14" Width="6" Cursor="SizeWE"  Opacity="0" sw:WindowResizeBehavior.LeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
                <Thumb x:Name="ThumbBottomLeft" Height="6" Width="6" VerticalAlignment="Bottom" HorizontalAlignment="Left" Cursor="SizeNESW"  Opacity="0" sw:WindowResizeBehavior.BottomLeftResize="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="ResizeMode" Value="CanResizeWithGrip"/>
                        <Condition Property="WindowState" Value="Normal"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="Visibility" TargetName="WindowResizeGrip" Value="Visible"/>
                </MultiTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <!-- the custom window style and the window template 
        Here you can customize the look of the window without having to touch the control template 
        or comment out the brushes and create a new style (see the red style below)-->

        <Style x:Key="CustomWindowStyle" TargetType="{x:Type Window}">
            <Setter Property="WindowStyle" Value="None"/>
            <Setter Property="AllowsTransparency" Value="True"/>
            <Setter Property="MinWidth" Value="200"/>
            <Setter Property="MinHeight" Value="46"/>
            <!--CaptionHeight + ResizeBorderThickness * 2-->
            <Setter Property="Background" Value="LightGray"/>
            <!-- Valentin Here change the color of the borders-->
            <Setter Property="BorderBrush" Value="LightGray"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Foreground" Value="DimGray"/>
            <Setter Property="Template" Value="{StaticResource WindowTemplate}"/>
        </Style>

  
    </Window.Resources>

</Window>
